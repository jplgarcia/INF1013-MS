package board;

import gameButtons.Load;
import gameButtons.Restart;
import gameButtons.Save;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JFrame;
import javax.swing.JPanel;

import client.ClientSocketSingleton;


public class Board implements Observer
{	
	public BoardMatrix boardMatrix = new BoardMatrix();

	static private int tileWidth = 50, tileHeight = 50;
	
	private ClickCount counter = new ClickCount(this);
	private ClickObserver watcher = new ClickObserver();
	
	private BoardMovement boardMovement = new BoardMovement(boardMatrix);
	private char turn = 'b';
	private int line = 1;
		
	public JFrame frame;
	public JPanel mainPanel;
	private JPanel buttonPanel;
	private JPanel boardPanel;
	public DrawBoard draw;
	
	private Save saveButton;
	private Load loadButton;
	private Restart restartButton;
	
	public JFrame getFrame()
	{
		return frame;
	}
	
	public Board()
	{
		counter.addObserver(watcher);

		System.out.println(line + " - Brancas Come�am!");
		line++;
		
		frame = new JFrame("Chess");
		frame.addWindowListener(new WindowAdapter()
        {
            public void windowClosing(WindowEvent e)
            {
                ClientSocketSingleton.getInstance().getMessager().sendMessage("###:: me");
                e.getWindow().dispose();
            }
        });
		boardPanel = new JPanel();
		draw = new DrawBoard(boardMatrix);
		boardPanel = draw.panel;
		boardPanel.addMouseListener(new MouseAdapter() 
		{
			@Override
			public void mousePressed(MouseEvent e)
			{	
				String playerColor = ClientSocketSingleton.getInstance().getMessager().getColor();
				if ((turn == 'b' && playerColor == "white") || (turn == 'p' && playerColor == "black"))
				tryMove(new Coordinate(e.getX()/tileWidth, e.getY()/tileHeight));
			}
		});
		mainPanel = new JPanel(new BorderLayout());
		buttonPanel = new JPanel();
		
		saveButton = new Save("Save");
		loadButton = new Load("Load");
		restartButton = new Restart("Restart");
		
		saveButton.save.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				saveButton.saveGame(boardMatrix, turn);
			}
		});
		
		loadButton.load.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				loadButton.loadGame(boardMatrix, boardPanel);
				turn = loadButton.getTurn();
			}
		});
		
		restartButton.restart.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				restartButton.restartGame(boardMatrix, boardPanel);
				turn = 'b';
			}
		});
		
		buttonPanel.add(saveButton.save);
		buttonPanel.add(loadButton.load);
		buttonPanel.add(restartButton.restart);
		
		mainPanel.add(boardPanel, BorderLayout.CENTER);
		mainPanel.add(buttonPanel, BorderLayout.SOUTH);
		frame.add(mainPanel);
		
		/* + 15 e + 40 s�o valores arbitrariamente escolhidos */
		frame.setBounds(100, 100, (tileWidth * 8) + 15, (tileHeight * 8) + 80 );		
	}	
	
	public void tryMove(Coordinate coord) {
		if(counter.isEven())
		{
			if( boardMovement.moveFrom(coord, line, turn) )
			{
				counter.decrement();
			}
		}
		else
		{
			if( !boardMovement.moveTo(coord, line, turn) )
			{
				nextTurn();
			}
			else
			{
				line++;
			}
		}
		counter.increment();
	}
	
	public Board getBoard(){
		return this;
	}
	public BoardMatrix getCurrentBoard() {
		return this.boardMatrix;
		
	}
	private void nextTurn ()
	{
		if( turn == 'b')
		{
			turn = 'p';
			System.out.println(line + " - Turno das Pe�as Pretas!");
		}
		else
		{	
			turn = 'b';
			System.out.println(line + " - Turno das Pe�as Brancas!");
		}
		line++;
	}

	@Override
	public void update(Observable o, Object arg) {
		String line = (String) arg;
		String[] parts = line.split(", "); 	
		int fromx = Integer.parseInt(parts[0]); 		
		int fromy = Integer.parseInt(parts[1]); 		
		int tox = Integer.parseInt(parts[2]); 		
		int toy = Integer.parseInt(parts[3]); 
		Coordinate initial = new Coordinate(fromx, fromy);
		Coordinate ending = new Coordinate(tox, toy);
		tryMove(initial);
		tryMove(ending);
	}
}